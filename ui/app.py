from pathlib import Path
import os
import requests
import chainlit as cl
# from chainlit.playground.config import PlaygroundConfig
# from chainlit.playground.providers.openai import OpenAISettings
from chainlit.element import Element
import json
from typing import Dict, List, Any

# API settings
API_URL = os.getenv("API_URL", "http://localhost:8051")
API_PREFIX = os.getenv("API_PREFIX", "/api/v1")

# Customize UI


@cl.on_settings_update
async def setup_agent(settings):
    print(f"Settings updated: {settings}")

# Upload handler


# @cl.on_upload
# async def handle_upload(files):
#     for file in files:
#         if not file.name.lower().endswith(".pdf"):
#             await cl.Message(
#                 content=f"Ch·ªâ ch·∫•p nh·∫≠n file PDF. {file.name} kh√¥ng ph·∫£i l√† file PDF.",
#                 author="System"
#             ).send()
#             continue

#         # Upload file to API
#         files_data = {"file": (file.name, file.content)}
#         response = requests.post(
#             f"{API_URL}{API_PREFIX}/upload",
#             files=files_data
#         )

#         if response.status_code == 200:
#             result = response.json()
#             await cl.Message(
#                 content=f"ƒê√£ t·∫£i l√™n file `{file.name}` th√†nh c√¥ng. H·ªá th·ªëng ƒëang x·ª≠ l√Ω...",
#                 author="System"
#             ).send()
#         else:
#             error_msg = "L·ªói kh√¥ng x√°c ƒë·ªãnh"
#             try:
#                 error_data = response.json()
#                 error_msg = error_data.get("detail", error_msg)
#             except:
#                 pass

#             await cl.Message(
#                 content=f"L·ªói khi t·∫£i l√™n file `{file.name}`: {error_msg}",
#                 author="System"
#             ).send()

# Message handler

def process_message_element(element):
    extension = Path(element.path).suffix.lower()
    if extension == ".pdf":
        # ƒê·ªçc file PDF d∆∞·ªõi d·∫°ng nh·ªã ph√¢n
        with open(element.path, "rb") as f:
            pdf_content = f.read()

        # Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i
        files_data = {
            "file": (Path(element.path).name, pdf_content, "application/pdf")
        }
        data = {
            "document_id": element.name  # G·ª≠i document_id trong form-data
        }

        # G·ª≠i request ƒë·∫øn API
        response = requests.post(
            f"{API_URL}{API_PREFIX}/upload",
            files=files_data,
            data=data
        )

        # Ki·ªÉm tra ph·∫£n h·ªìi t·ª´ server
        if response.status_code == 200:
            return response.json()  # Tr·∫£ v·ªÅ d·ªØ li·ªáu JSON t·ª´ server
        else:
            return {"error": f"Failed to upload file. Status: {response.status_code}, Message: {response.text}"}

    else:
        return {"error": "Unsupported file format"}
@cl.on_message
async def on_message(message: cl.Message):
    # Set up loading message
    msg = cl.Message(content="", author="Chatbot")
    await msg.send()

    try:
        elements = message.elements
        for element in elements:
            if element.type == "file":
                extension = Path(element.path).suffix.lower()
                if extension == ".pdf":
                    # Handle PDF file
                    pdf_content = process_message_element(element)
                    await cl.Message(
                        content=f"ƒê√£ t·∫£i l√™n file `{element.name}` th√†nh c√¥ng. H·ªá th·ªëng ƒëang x·ª≠ l√Ω...",
                        author="System"
                    )
                else:
                    await cl.Message(
                        content=f"Ch·ªâ ch·∫•p nh·∫≠n file PDF. {element.name} kh√¥ng ph·∫£i l√† file PDF.",
                        author="System"
                    )
            
        # Send request to API
        response = requests.post(
            f"{API_URL}{API_PREFIX}/chat",
            json={"message": message.content}
        )

        if response.status_code != 200:
            error_msg = "L·ªói kh√¥ng x√°c ƒë·ªãnh"
            try:
                error_data = response.json()
                error_msg = error_data.get("detail", error_msg)
            except:
                pass
            
            await cl.Message(
                content=f"L·ªói khi g·ª≠i c√¢u h·ªèi: {error_msg}",
                author="System"
            ).send()
            return

        result = response.json()

        # Create response with sources
        response_text = result["response"]
        sources = result.get("sources", [])

        # Update message with response
        await msg.update()

        # Add source elements if available
        if sources:
            elements = []
            for i, source in enumerate(sources):
                source_text = source["text"]
                metadata = source["metadata"]
                source_name = metadata.get("source", "Unknown")

                # Create element for source
                source_element = Element(
                    name=f"source_{i}",
                    type="text",
                    content=f"Ngu·ªìn: {source_name}\n\n{source_text}",
                    display="side"
                )
                elements.append(source_element)

            await cl.Message(
                content=response_text,
                author="Chatbot",
                elements=elements
            ).send()

    except Exception as e:
        await msg.update()

# Startup message


@cl.on_chat_start
async def on_chat_start():
    # Send welcome message
    await cl.Message(
        content="""
# üëã Ch√†o m·ª´ng ƒë·∫øn v·ªõi Chatbot Quy ch·∫ø ƒê√†o t·∫°o

T√¥i l√† tr·ª£ l√Ω AI chuy√™n tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ quy ch·∫ø ƒë√†o t·∫°o c·ªßa tr∆∞·ªùng ƒë·∫°i h·ªçc.

## üìö C√°ch s·ª≠ d·ª•ng:
1. T·∫£i l√™n file PDF quy ch·∫ø ƒë√†o t·∫°o b·∫±ng n√∫t t·∫£i l√™n ·ªü g√≥c d∆∞·ªõi b√™n tr√°i
2. ƒê·∫∑t c√¢u h·ªèi v·ªÅ quy ch·∫ø ƒë√†o t·∫°o v√† nh·∫≠n c√¢u tr·∫£ l·ªùi d·ª±a tr√™n n·ªôi dung trong t√†i li·ªáu

## üîç L∆∞u √Ω:
- M·ªói c√¢u tr·∫£ l·ªùi s·∫Ω ƒëi k√®m v·ªõi tr√≠ch d·∫´n t·ª´ quy ch·∫ø ƒë√†o t·∫°o
- N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn quy ch·∫ø, chatbot c√≥ th·ªÉ kh√¥ng tr·∫£ l·ªùi ƒë∆∞·ª£c

H√£y b·∫Øt ƒë·∫ßu b·∫±ng c√°ch t·∫£i l√™n file quy ch·∫ø ƒë√†o t·∫°o!
        """,
        author="System"
    ).send()

    # Get list of available documents
    try:
        response = requests.get(f"{API_URL}{API_PREFIX}/documents")
        if response.status_code == 200:
            documents = response.json()
            if documents:
                doc_list = "\n".join(
                    [f"- {doc['filename']}" for doc in documents])
                await cl.Message(
                    content=f"C√°c t√†i li·ªáu s·∫µn c√≥ trong h·ªá th·ªëng:\n{doc_list}",
                    author="System"
                ).send()
            else:
                await cl.Message(
                    content="Hi·ªán ch∆∞a c√≥ t√†i li·ªáu n√†o trong h·ªá th·ªëng. Vui l√≤ng t·∫£i l√™n file PDF quy ch·∫ø ƒë√†o t·∫°o.",
                    author="System"
                ).send()
    except Exception as e:
        print(f"Error fetching documents: {str(e)}")

if __name__ == "__main__":
    cl.run()
